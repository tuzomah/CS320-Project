<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BattleShips</title>
    <link rel="stylesheet" href="\stylesheets\bs.css">
</head>
<body>
    <div class="header">
        <h1><a href="/home"><img src="/images/combine.png" alt="Title" class="titleI"></a></h1>
	<h2><%= username %> - <%= coins %>Â¢</h2>
        <div class="line"></div>
        <li class="divider2"></li>
        <div class="navigation">
            <ul>
                <li><a href="../battlesnakes/snakes.html">Snakes and Ladders</a></li>
                <li class="divider"></li>
                <li><a href="/battleship">Battleship</a></li>
                <li class="divider"></li>
                <li><a href="../battlesnakes/risk.html">Risk</a></li>
                <li class="divider"></li>
                <li><a href="/leaderboard">Leaderboard</a></li>
                <li class="divider"></li>
                <li><a href="/credits">Credits</a></li>
            </ul>
            <li class="divider2"></li>
        </div>
    </div>

    <div class="container">
        <div class="battleship-grid grid-user"></div>
        <div class="battleship-grid grid-computer"></div>
    </div>

    <div class="container hidden-info">
        <div class="setup-buttons" id="setup-buttons">
            <button id="start" class="buttonInfo">Start Game</button>
            <button id="rotate" class="buttonInfo">Rotate Your Ships</button>
            <button id="rotate" class="buttonInfo">Show Timer</button>
        </div>
        <h3 id="info" class="info-txt"></h3>
    </div>

    <div class="container">
        <div class="grid-display">
            <div class="ship destroyer-container" draggable="true"><div id="destroyer-0"></div><div id="destroyer-1"></div></div>
            <div class="ship submarine-container" draggable="true"><div id="submarine-0"></div><div id="submarine-1"></div><div id="submarine-2"></div></div>
            <div class="ship cruiser-container" draggable="true"><div id="cruiser-0"></div><div id="cruiser-1"></div><div id="cruiser-2"></div></div>
            <div class="ship battleship-container" draggable="true"><div id="battleship-0"></div><div id="battleship-1"></div><div id="battleship-2"></div><div id="battleship-3"></div></div>
            <div class="ship carrier-container" draggable="true"><div id="carrier-0"></div><div id="carrier-1"></div><div id="carrier-2"></div><div id="carrier-3"></div><div id="carrier-4"></div></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gridDisplay = document.querySelector('.grid-display')
            const userGrid = document.querySelector('.grid-user')
            const computerGrid = document.querySelector('.grid-computer')
            const ships = document.querySelectorAll('.ship')
            const submarine = document.querySelector('.submarine-container')
            const destroyer = document.querySelector('.destroyer-container')
            const cruiser = document.querySelector('.cruiser-container')
            const carrier = document.querySelector('.carrier-container')
            const battleship = document.querySelector('.battleship-container')
            const startButton = document.querySelector('#start')
            const rotateButton = document.querySelector('#rotate')
            const textDisplay = document.querySelector('#info')
            const setupButtons = document.getElementById('setup-buttons')
            const squareUsers = []
            const squareEnemy = []
            let isHorizont = true
            let isGameFinished = false
            let currentPlayer = 'user'
            const width = 10
            let allShipsPlaced = false
            let selectedShipNameWithIndex
            let moveShip
            let moveShipLength


            const shipArray = [ //array for ships
                {
                    name: 'destroyer',
                    directions: [
                        [0, 1],
                        [0, width]
                    ]
                },
                {
                    name: 'cruiser',
                    directions: [
                        [0, 1, 2],
                        [0, width, width*2]
                    ]
                },
                {
                    name: 'submarine',
                    directions: [
                        [0, 1, 2],
                        [0, width, width*2]
                    ]
                },
                {
                    name: 'carrier',
                    directions: [
                        [0, 1, 2, 3, 4],
                        [0, width, width*2, width*3, width*4]
                    ]
                },
                {
                    name: 'battleship',
                    directions: [
                        [0, 1, 2, 3],
                        [0, width, width*2, width*3]
                    ]
                },
            ]

            createBoard(userGrid, squareUsers)
            createBoard(computerGrid, squareEnemy)
            startGame();


            function startGame() {
                generate(shipArray[0])
                generate(shipArray[1])
                generate(shipArray[2])
                generate(shipArray[3])
                generate(shipArray[4])

                startButton.addEventListener('click', () => {
                    setupButtons.style.display = 'none'
                    playGameSingle()
                    textDisplay.innerHTML = "";
                })
            }


            function createBoard(gridLines, spotsOnGrid) { // Board creation
                for (let i = 0; i < width*width; i++) {
                    const square = document.createElement('div')
                    square.dataset.id = i
                    gridLines.appendChild(square)
                    spotsOnGrid.push(square)
                }
            }


            function generate(ship) {
                let randPlacement = Math.floor(Math.random() * ship.directions.length)
                let current = ship.directions[randPlacement] //enemy locations
                if (randPlacement === 0) direction = 1
                if (randPlacement === 1) direction = 10
                let randomStart = Math.abs(Math.floor(Math.random() * squareEnemy.length - (ship.directions[0].length * direction)))

                const takenPlacement = current.some(index => squareEnemy[randomStart + index].classList.contains('taken'))
                const locatedRightEdge = current.some(index => (randomStart + index) % width === width - 1)
                const locatedLeftEdge = current.some(index => (randomStart + index) % width === 0)

                if (!takenPlacement && !locatedRightEdge && !locatedLeftEdge) current.forEach(index => squareEnemy[randomStart + index].classList.add('taken', ship.name))

                else generate(ship)
            }

            function rotate() {
                if (isHorizont) {
                    destroyer.classList.toggle('destroyer-container-vertical') //shifts ships 90 deg
                    submarine.classList.toggle('submarine-container-vertical')
                    cruiser.classList.toggle('cruiser-container-vertical')
                    battleship.classList.toggle('battleship-container-vertical')
                    carrier.classList.toggle('carrier-container-vertical')
                    isHorizont = false
                    return
                }
                if (!isHorizont) {
                    destroyer.classList.toggle('destroyer-container-vertical')
                    submarine.classList.toggle('submarine-container-vertical')
                    cruiser.classList.toggle('cruiser-container-vertical')
                    battleship.classList.toggle('battleship-container-vertical')
                    carrier.classList.toggle('carrier-container-vertical')
                    isHorizont = true
                    return
                }
            }
            rotateButton.addEventListener('click', rotate)

            ships.forEach(ship => ship.addEventListener('dragstart', dragStart)) //drag ship into grid
            squareUsers.forEach(square => square.addEventListener('dragstart', dragStart))
            squareUsers.forEach(square => square.addEventListener('dragover', dragOver))
            squareUsers.forEach(square => square.addEventListener('dragenter', dragEnter))
            squareUsers.forEach(square => square.addEventListener('dragleave', dragLeave))
            squareUsers.forEach(square => square.addEventListener('drop', dragDrop))
            squareUsers.forEach(square => square.addEventListener('dragend', dragEnd))

            ships.forEach(ship => ship.addEventListener('mousedown', (e) => {
                selectedShipNameWithIndex = e.target.id
            }))

            function dragStart() {
                moveShip = this
                moveShipLength = this.childNodes.length
            }

            function dragOver(e) {
                e.preventDefault()
            }

            function dragEnter(e) {
                e.preventDefault()
            }

            function dragLeave() {
                // console.log('drag leave')
            }

            function dragDrop() {


                let shipNameWithLastId = moveShip.lastChild.id
                let shipClass = shipNameWithLastId.slice(0, -2)
                let lastShipIndex = parseInt(shipNameWithLastId.substr(-1))
                let shipLastId = lastShipIndex + parseInt(this.dataset.id)

                const notAllowedHorizontal = [0,10,20,30,40,50,60,70,80,90,1,11,21,31,41,51,61,71,81,91,2,22,32,42,52,62,72,82,92,3,13,23,33,43,53,63,73,83,93]
                const notAllowedVertical = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60]

                let newNotAllowedHorizontal = notAllowedHorizontal.splice(0, 10 * lastShipIndex)
                let newNotAllowedVertical = notAllowedVertical.splice(0, 10 * lastShipIndex)

                selectedShipIndex = parseInt(selectedShipNameWithIndex.substr(-1))

                shipLastId = shipLastId - selectedShipIndex


                if (isHorizont && !newNotAllowedHorizontal.includes(shipLastId)) {
                    for (let i=0; i < moveShipLength; i++) {
                        let directionClass
                        if (i === 0) directionClass = 'start'
                        if (i === moveShipLength - 1) directionClass = 'end'
                        squareUsers[parseInt(this.dataset.id) - selectedShipIndex + i].classList.add('taken', 'horizontal', directionClass, shipClass)
                    }
                } else if (!isHorizont && !newNotAllowedVertical.includes(shipLastId)) {
                    for (let i=0; i < moveShipLength; i++) {
                        let directionClass
                        if (i === 0) directionClass = 'start'
                        if (i === moveShipLength - 1) directionClass = 'end'
                        squareUsers[parseInt(this.dataset.id) - selectedShipIndex + width*i].classList.add('taken', 'vertical', directionClass, shipClass)
                    }
                } else return

                gridDisplay.removeChild(moveShip)


                const allShips = document.querySelectorAll('.ship') // checks if all ships are on grid
                allShipsPlaced = true
                allShips.forEach(ship => {
                    if (!ship.classList.contains('taken')) {
                        allShipsPlaced = false
                    }
                })

                if(allShipsPlaced) {
                    textDisplay.innerHTML = "Ready to start the game."
                } else {
                    textDisplay.innerHTML = "Please place all ships"
                }
            }

            function dragEnd() {
                // console.log('') will log dragDrop end
            }

            function playGameSingle() { //game log
                if (isGameFinished) return
                if (currentPlayer === 'user') {
                    squareEnemy.forEach(square => square.addEventListener('click', function(e) {
                        shotFired = square.dataset.id
                        showOutcome(square.classList)
                    }))
                }
                if (currentPlayer === 'enemy') { //code stuck on this
                    setTimeout(enemyGo, 1000)
                }
            }

            let submarineCount = 0
            let destroyerCount = 0
            let cruiserCount = 0
            let carrierCount = 0
            let battleshipCount = 0

            function showOutcome(classList) {
                if (!allShipsPlaced) { // wont start game til all ships are placed
                    textDisplay.innerHTML = "Please place all ships before starting the game."
                    return;
                }
                const enemySquare = computerGrid.querySelector(`div[data-id='${shotFired}']`)
                const obj = Object.values(classList)
                if (!enemySquare.classList.contains('boom') && currentPlayer === 'user' && !isGameFinished) {
                    if (obj.includes('destroyer')) destroyerCount++
                    if (obj.includes('submarine')) submarineCount++
                    if (obj.includes('cruiser')) cruiserCount++
                    if (obj.includes('battleship')) battleshipCount++
                    if (obj.includes('carrier')) carrierCount++
                    const isFirstHit = destroyerCount + submarineCount + cruiserCount + battleshipCount + carrierCount === 1;
                    if (isFirstHit) {
                        textDisplay.innerHTML = "";
                    }
                }
                if (obj.includes('taken')) {
                    enemySquare.classList.add('boom')
                } else {
                    enemySquare.classList.add('miss')
                }
                checkForWins()
                currentPlayer = 'enemy'
                playGameSingle()
            }

            let enemyDestroyerCnt = 0
            let enemySubmarineCnt = 0
            let enemyCruiserCnt = 0
            let enemyBattleshipCnt = 0
            let enemyCarrierCnt = 0


            function enemyGo(square) {
                square = Math.floor(Math.random() * squareUsers.length)
                if (!squareUsers[square].classList.contains('boom')) {
                    const hit = squareUsers[square].classList.contains('taken')
                    squareUsers[square].classList.add(hit ? 'boom' : 'miss')
                    if (squareUsers[square].classList.contains('destroyer')) enemyDestroyerCnt++
                    if (squareUsers[square].classList.contains('submarine')) enemySubmarineCnt++
                    if (squareUsers[square].classList.contains('cruiser')) enemyCruiserCnt++
                    if (squareUsers[square].classList.contains('battleship')) enemyBattleshipCnt++
                    if (squareUsers[square].classList.contains('carrier')) enemyCarrierCnt++
                    checkForWins()
                } else enemyGo()
                currentPlayer = 'user' // changes to user
            }

            function checkForWins() {
                if (destroyerCount === 2) {
                    destroyerCount = 1
                }
                if (submarineCount === 3) {
                    submarineCount = 1
                }
                if (cruiserCount === 3) {
                    cruiserCount = 1
                }
                if (battleshipCount === 4) {
                    battleshipCount = 1
                }
                if (carrierCount === 5) {
                    carrierCount = 1
                }
                if (enemyDestroyerCnt === 2) {
                    enemyDestroyerCnt = 1
                }
                if (enemySubmarineCnt === 3) {
                    enemySubmarineCnt = 1
                }
                if (enemyCruiserCnt === 3) {
                    enemyCruiserCnt = 1
                }
                if (enemyBattleshipCnt === 4) {
                    enemyBattleshipCnt = 1
                }
                if (enemyCarrierCnt === 5) {
                    enemyCarrierCnt = 1
                }

                if ((destroyerCount + submarineCount + cruiserCount + battleshipCount + carrierCount) === 5) {

                    // user wins
                }
                if ((enemyDestroyerCnt + enemySubmarineCnt + enemyCruiserCnt + enemyBattleshipCnt + enemyCarrierCnt) === 5) {

                    // enemy wins
                }
            }

            function gameOver() {
                isGameFinished = true
                startButton.removeEventListener('click', playGameSingle)
            }
        })
    </script>
    <footer class="footer">
        <p>Copyright 2024</p>
    </footer>
</body>

</html>